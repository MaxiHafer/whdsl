// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3-0.20221101205447-050c4bfe15b5 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all articles
	// (GET /articles)
	GetArticles(c *gin.Context)
	// Create a new article
	// (POST /articles)
	PostArticles(c *gin.Context)
	// Delete an article
	// (DELETE /articles/{id})
	DeleteArticlesId(c *gin.Context, id string)
	// Get an article
	// (GET /articles/{id})
	GetArticlesId(c *gin.Context, id string)
	// Update an article
	// (PUT /articles/{id})
	PutArticlesId(c *gin.Context, id string)
	// List all transaction
	// (GET /transaction)
	GetTransactions(c *gin.Context)
	// Create a new trasaction
	// (POST /transaction)
	PostTransactions(c *gin.Context)
	// Delete a transaction
	// (DELETE /transaction/{id})
	DeleteTransactionsId(c *gin.Context, id string)
	// Get an transaction
	// (GET /transaction/{id})
	GetTransactionsId(c *gin.Context, id string)
	// Update a transaction
	// (PUT /transaction/{id})
	PutTransactionsId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetArticles operation middleware
func (siw *ServerInterfaceWrapper) GetArticles(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetArticles(c)
}

// PostArticles operation middleware
func (siw *ServerInterfaceWrapper) PostArticles(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostArticles(c)
}

// DeleteArticlesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticlesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteArticlesId(c, id)
}

// GetArticlesId operation middleware
func (siw *ServerInterfaceWrapper) GetArticlesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetArticlesId(c, id)
}

// PutArticlesId operation middleware
func (siw *ServerInterfaceWrapper) PutArticlesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutArticlesId(c, id)
}

// GetTransactions operation middleware
func (siw *ServerInterfaceWrapper) GetTransactions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTransactions(c)
}

// PostTransactions operation middleware
func (siw *ServerInterfaceWrapper) PostTransactions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostTransactions(c)
}

// DeleteTransactionsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTransactionsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteTransactionsId(c, id)
}

// GetTransactionsId operation middleware
func (siw *ServerInterfaceWrapper) GetTransactionsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTransactionsId(c, id)
}

// PutTransactionsId operation middleware
func (siw *ServerInterfaceWrapper) PutTransactionsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutTransactionsId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.RouterGroup, si ServerInterface, options GinServerOptions) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/articles", wrapper.GetArticles)

	router.POST(options.BaseURL+"/articles", wrapper.PostArticles)

	router.DELETE(options.BaseURL+"/articles/:id", wrapper.DeleteArticlesId)

	router.GET(options.BaseURL+"/articles/:id", wrapper.GetArticlesId)

	router.PUT(options.BaseURL+"/articles/:id", wrapper.PutArticlesId)

	router.GET(options.BaseURL+"/transaction", wrapper.GetTransactions)

	router.POST(options.BaseURL+"/transaction", wrapper.PostTransactions)

	router.DELETE(options.BaseURL+"/transaction/:id", wrapper.DeleteTransactionsId)

	router.GET(options.BaseURL+"/transaction/:id", wrapper.GetTransactionsId)

	router.PUT(options.BaseURL+"/transaction/:id", wrapper.PutTransactionsId)

	return router
}

type GetArticlesRequestObject struct {
}

type GetArticlesResponseObject interface {
	VisitGetArticlesResponse(w http.ResponseWriter) error
}

type GetArticles200JSONResponse []Article

func (response GetArticles200JSONResponse) VisitGetArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostArticlesRequestObject struct {
	Body *PostArticlesJSONRequestBody
}

type PostArticlesResponseObject interface {
	VisitPostArticlesResponse(w http.ResponseWriter) error
}

type PostArticles201JSONResponse string

func (response PostArticles201JSONResponse) VisitPostArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostArticles400JSONResponse string

func (response PostArticles400JSONResponse) VisitPostArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticlesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteArticlesIdResponseObject interface {
	VisitDeleteArticlesIdResponse(w http.ResponseWriter) error
}

type DeleteArticlesId200JSONResponse string

func (response DeleteArticlesId200JSONResponse) VisitDeleteArticlesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticlesId404JSONResponse string

func (response DeleteArticlesId404JSONResponse) VisitDeleteArticlesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesIdRequestObject struct {
	Id string `json:"id"`
}

type GetArticlesIdResponseObject interface {
	VisitGetArticlesIdResponse(w http.ResponseWriter) error
}

type GetArticlesId200JSONResponse Article

func (response GetArticlesId200JSONResponse) VisitGetArticlesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesId404JSONResponse string

func (response GetArticlesId404JSONResponse) VisitGetArticlesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutArticlesIdRequestObject struct {
	Id string `json:"id"`
}

type PutArticlesIdResponseObject interface {
	VisitPutArticlesIdResponse(w http.ResponseWriter) error
}

type PutArticlesId200JSONResponse string

func (response PutArticlesId200JSONResponse) VisitPutArticlesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutArticlesId404JSONResponse string

func (response PutArticlesId404JSONResponse) VisitPutArticlesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionsRequestObject struct {
}

type GetTransactionsResponseObject interface {
	VisitGetTransactionsResponse(w http.ResponseWriter) error
}

type GetTransactions200JSONResponse []Transaction

func (response GetTransactions200JSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTransactionsRequestObject struct {
	Body *PostTransactionsJSONRequestBody
}

type PostTransactionsResponseObject interface {
	VisitPostTransactionsResponse(w http.ResponseWriter) error
}

type PostTransactions201JSONResponse string

func (response PostTransactions201JSONResponse) VisitPostTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostTransactions400JSONResponse string

func (response PostTransactions400JSONResponse) VisitPostTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransactionsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteTransactionsIdResponseObject interface {
	VisitDeleteTransactionsIdResponse(w http.ResponseWriter) error
}

type DeleteTransactionsId200JSONResponse string

func (response DeleteTransactionsId200JSONResponse) VisitDeleteTransactionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransactionsId404JSONResponse string

func (response DeleteTransactionsId404JSONResponse) VisitDeleteTransactionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionsIdRequestObject struct {
	Id string `json:"id"`
}

type GetTransactionsIdResponseObject interface {
	VisitGetTransactionsIdResponse(w http.ResponseWriter) error
}

type GetTransactionsId200JSONResponse Transaction

func (response GetTransactionsId200JSONResponse) VisitGetTransactionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionsId404JSONResponse string

func (response GetTransactionsId404JSONResponse) VisitGetTransactionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutTransactionsIdRequestObject struct {
	Id string `json:"id"`
}

type PutTransactionsIdResponseObject interface {
	VisitPutTransactionsIdResponse(w http.ResponseWriter) error
}

type PutTransactionsId200JSONResponse string

func (response PutTransactionsId200JSONResponse) VisitPutTransactionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutTransactionsId404JSONResponse string

func (response PutTransactionsId404JSONResponse) VisitPutTransactionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all articles
	// (GET /articles)
	GetArticles(ctx context.Context, request GetArticlesRequestObject) (GetArticlesResponseObject, error)
	// Create a new article
	// (POST /articles)
	PostArticles(ctx context.Context, request PostArticlesRequestObject) (PostArticlesResponseObject, error)
	// Delete an article
	// (DELETE /articles/{id})
	DeleteArticlesId(ctx context.Context, request DeleteArticlesIdRequestObject) (DeleteArticlesIdResponseObject, error)
	// Get an article
	// (GET /articles/{id})
	GetArticlesId(ctx context.Context, request GetArticlesIdRequestObject) (GetArticlesIdResponseObject, error)
	// Update an article
	// (PUT /articles/{id})
	PutArticlesId(ctx context.Context, request PutArticlesIdRequestObject) (PutArticlesIdResponseObject, error)
	// List all transaction
	// (GET /transaction)
	GetTransactions(ctx context.Context, request GetTransactionsRequestObject) (GetTransactionsResponseObject, error)
	// Create a new trasaction
	// (POST /transaction)
	PostTransactions(ctx context.Context, request PostTransactionsRequestObject) (PostTransactionsResponseObject, error)
	// Delete a transaction
	// (DELETE /transaction/{id})
	DeleteTransactionsId(ctx context.Context, request DeleteTransactionsIdRequestObject) (DeleteTransactionsIdResponseObject, error)
	// Get an transaction
	// (GET /transaction/{id})
	GetTransactionsId(ctx context.Context, request GetTransactionsIdRequestObject) (GetTransactionsIdResponseObject, error)
	// Update a transaction
	// (PUT /transaction/{id})
	PutTransactionsId(ctx context.Context, request PutTransactionsIdRequestObject) (PutTransactionsIdResponseObject, error)
}

type StrictHandlerFunc func(ctx *gin.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetArticles operation middleware
func (sh *strictHandler) GetArticles(ctx *gin.Context) {
	var request GetArticlesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticles(ctx, request.(GetArticlesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
	} else if validResponse, ok := response.(GetArticlesResponseObject); ok {
		if err := validResponse.VisitGetArticlesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostArticles operation middleware
func (sh *strictHandler) PostArticles(ctx *gin.Context) {
	var request PostArticlesRequestObject

	var body PostArticlesJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostArticles(ctx, request.(PostArticlesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostArticles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
	} else if validResponse, ok := response.(PostArticlesResponseObject); ok {
		if err := validResponse.VisitPostArticlesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteArticlesId operation middleware
func (sh *strictHandler) DeleteArticlesId(ctx *gin.Context, id string) {
	var request DeleteArticlesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteArticlesId(ctx, request.(DeleteArticlesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteArticlesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
	} else if validResponse, ok := response.(DeleteArticlesIdResponseObject); ok {
		if err := validResponse.VisitDeleteArticlesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetArticlesId operation middleware
func (sh *strictHandler) GetArticlesId(ctx *gin.Context, id string) {
	var request GetArticlesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticlesId(ctx, request.(GetArticlesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticlesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
	} else if validResponse, ok := response.(GetArticlesIdResponseObject); ok {
		if err := validResponse.VisitGetArticlesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PutArticlesId operation middleware
func (sh *strictHandler) PutArticlesId(ctx *gin.Context, id string) {
	var request PutArticlesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutArticlesId(ctx, request.(PutArticlesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutArticlesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
	} else if validResponse, ok := response.(PutArticlesIdResponseObject); ok {
		if err := validResponse.VisitPutArticlesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetTransactions operation middleware
func (sh *strictHandler) GetTransactions(ctx *gin.Context) {
	var request GetTransactionsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTransactions(ctx, request.(GetTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
	} else if validResponse, ok := response.(GetTransactionsResponseObject); ok {
		if err := validResponse.VisitGetTransactionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostTransactions operation middleware
func (sh *strictHandler) PostTransactions(ctx *gin.Context) {
	var request PostTransactionsRequestObject

	var body PostTransactionsJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTransactions(ctx, request.(PostTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
	} else if validResponse, ok := response.(PostTransactionsResponseObject); ok {
		if err := validResponse.VisitPostTransactionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteTransactionsId operation middleware
func (sh *strictHandler) DeleteTransactionsId(ctx *gin.Context, id string) {
	var request DeleteTransactionsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTransactionsId(ctx, request.(DeleteTransactionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTransactionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
	} else if validResponse, ok := response.(DeleteTransactionsIdResponseObject); ok {
		if err := validResponse.VisitDeleteTransactionsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetTransactionsId operation middleware
func (sh *strictHandler) GetTransactionsId(ctx *gin.Context, id string) {
	var request GetTransactionsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTransactionsId(ctx, request.(GetTransactionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTransactionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
	} else if validResponse, ok := response.(GetTransactionsIdResponseObject); ok {
		if err := validResponse.VisitGetTransactionsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PutTransactionsId operation middleware
func (sh *strictHandler) PutTransactionsId(ctx *gin.Context, id string) {
	var request PutTransactionsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutTransactionsId(ctx, request.(PutTransactionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutTransactionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
	} else if validResponse, ok := response.(PutTransactionsIdResponseObject); ok {
		if err := validResponse.VisitPutTransactionsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yW348bNRDH/5XVwANITjahFar2LeVEiSi9E72Kh1MeJruTxGXXdu1xuBDt/47sze9c",
	"kw29AhV3Tz7HY898P/Njl5DrymhFih1kS3D5jCqMy4FlmZcUlliW1xPI7pbwtaUJZPBVujVLVzbpyuDG",
	"akOWJTmoxRIsffDSUgHZHcgCBCisCARUUg0q7RWDgNwSMhWDsPamWK1HAnhhCDLQ4/eUM9QjAfedqe6s",
	"tsdedV+io190QSXs/NaRldGWg+sGeQYZTCXP/Lib6yr1hi3mlI69groWcOx2MNv7b+tftoSJthUyZBD8",
	"7LCM0aw8cmylmkZXNBrZyXVBU1IdumeLHcZpvC68nIFQviz/JKujF7LYu9v7qNXfudb8LoJZNkebz9B+",
	"8+z7b+MLW8GzJVR4LytfQdbvhb/4a7PR27wqFdOULNQrZtnywJ96l9ZnUqY+SgIBtxaVw5ylVsescBPj",
	"cRjYoB620LoWF1OvBRTS0sYvUkHPOxi+AQHX7253EnprIdv5cqnOD+gWs0xNdExorRjzeFmDFgY3w+St",
	"N7FsQiDkcitNEwrczqRLpEswcbIyJSXh9ETbxFg9l4VU00SqOSnWdpFUqHBKFSlOcjQ4lqWMbASw5NBP",
	"4Lefrt6+ToYbi8HNEATMybrmuX63F3zQhhQaCRk86/a6fRCxmCPkdEUy/jOlGEhIAgwOB7zwiniwPiPA",
	"kjNaueb8d73eWgNqMgWNKWUejdP3rqHXdLWwkkxVNGzR/GCrO1qLi0b2fTWvf454nK8qtAvI4LV0nGBZ",
	"Jrj1uKmIO9hsjWoBRrsHQr3Rbj/WD54cv9TF4qIwW0UXHN92dLae6iN1+xc9e5i3R3L90JRhUPb5heTO",
	"3v0Si+TXRq8DJs2rCSaK/lhzeRhLLbbpmC5lUYeXCyqJ6ZjVVdxf0xoWMaktVsRkXZyw+w6uTibDKwjV",
	"C1kz0NYduZmo+0DECQFGn1gKZwUNuR04PX/ca99oTn7UXhUHlBo5E1SnEYmzPeKLI9G6Wv9VPq+IW8Ax",
	"/qGu5vmpTB4Jw7v49XCWROhkvP22Ojlcb3fP/RMDdvej75OGLO97vtZhb/v0sD2K/fEH7l60/8+hyxbX",
	"CnyU0mHGtpy/uwDPN5ed008N5vQc3i2uU7XVpqt8kWAuqun/wmhuCexjI/qpkj7TqG4HJtqSna/l9raE",
	"DGbMJkvTUudYzrTj7EXvRS9FI9N5H+pR/VcAAAD//49iRHr1EwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
