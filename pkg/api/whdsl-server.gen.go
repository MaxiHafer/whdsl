// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all articles
	// (GET /articles)
	GetArticles(c *gin.Context)
	// Create a new article
	// (POST /articles)
	PostArticles(c *gin.Context)
	// Delete an article
	// (DELETE /articles/{id})
	DeleteArticlesId(c *gin.Context, id string)
	// Get an article
	// (GET /articles/{id})
	GetArticlesId(c *gin.Context, id string)
	// Update an article
	// (PUT /articles/{id})
	PutArticlesId(c *gin.Context, id string)
	// Metrics endpoint
	// (GET /metrics)
	GetMetrics(c *gin.Context)
	// List all transactions
	// (GET /transactions)
	GetTransactions(c *gin.Context)
	// Create a new trasaction
	// (POST /transactions)
	PostTransactions(c *gin.Context)
	// Delete a transaction
	// (DELETE /transactions/{id})
	DeleteTransactionsId(c *gin.Context, id string)
	// Get an transaction
	// (GET /transactions/{id})
	GetTransactionsId(c *gin.Context, id string)
	// Update a transaction
	// (PUT /transactions/{id})
	PutTransactionsId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetArticles operation middleware
func (siw *ServerInterfaceWrapper) GetArticles(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetArticles(c)
}

// PostArticles operation middleware
func (siw *ServerInterfaceWrapper) PostArticles(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostArticles(c)
}

// DeleteArticlesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticlesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteArticlesId(c, id)
}

// GetArticlesId operation middleware
func (siw *ServerInterfaceWrapper) GetArticlesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetArticlesId(c, id)
}

// PutArticlesId operation middleware
func (siw *ServerInterfaceWrapper) PutArticlesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutArticlesId(c, id)
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetMetrics(c)
}

// GetTransactions operation middleware
func (siw *ServerInterfaceWrapper) GetTransactions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTransactions(c)
}

// PostTransactions operation middleware
func (siw *ServerInterfaceWrapper) PostTransactions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostTransactions(c)
}

// DeleteTransactionsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTransactionsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteTransactionsId(c, id)
}

// GetTransactionsId operation middleware
func (siw *ServerInterfaceWrapper) GetTransactionsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTransactionsId(c, id)
}

// PutTransactionsId operation middleware
func (siw *ServerInterfaceWrapper) PutTransactionsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutTransactionsId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/articles", wrapper.GetArticles)

	router.POST(options.BaseURL+"/articles", wrapper.PostArticles)

	router.DELETE(options.BaseURL+"/articles/:id", wrapper.DeleteArticlesId)

	router.GET(options.BaseURL+"/articles/:id", wrapper.GetArticlesId)

	router.PUT(options.BaseURL+"/articles/:id", wrapper.PutArticlesId)

	router.GET(options.BaseURL+"/metrics", wrapper.GetMetrics)

	router.GET(options.BaseURL+"/transactions", wrapper.GetTransactions)

	router.POST(options.BaseURL+"/transactions", wrapper.PostTransactions)

	router.DELETE(options.BaseURL+"/transactions/:id", wrapper.DeleteTransactionsId)

	router.GET(options.BaseURL+"/transactions/:id", wrapper.GetTransactionsId)

	router.PUT(options.BaseURL+"/transactions/:id", wrapper.PutTransactionsId)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTY/bNhD9K8S0R3UltzkEujldNDWaJotmgx6KPUzEWZuB+FFy5MZY6L8XpCzbsje2",
	"vNl+BFmfJGpIvnlv3njuoLLaWUOGA5R3EKoFaUyPU8+qqik+Om8deVaUPlSekElOOb7cWq+RoQSJTN+x",
	"0gQZ8MoRlBDYKzOHNgMlB7FNo+R9YVqZqbaNSSdr/Kh0o6GcFPGXvnYLxWarMkxz8nGvQZ2wHhzaOHke",
	"3HazYt9/oIrjIdceTcCKlTWHhOAG8yEs7FicjSPgAdRK5WmDi0zk5w+YvYYM3ry7hpuHi/EIvMUlZW5t",
	"qhprGKt0WCcVTK9m4m3jnPWJYkmh8sp1qcD1QgWhgkARlHY1iRh9a71w3i6VVGYulFmSYetXQqPBOWky",
	"LCp0+F7VKmmTASuOJQy//3z59pWYbXZMr2aQwZJ86K6bXBQRg3Vk0Cko4YeL4mICGTjkRRI5XyuZXuaU",
	"EolFgBFwlBdeEk/7mAw8BWdN6OK/L4qeA+oqBZ2rVZU25x9Cp15nvvikmHTa+K2nWyjhm3xr03zt0bw3",
	"6JZ39B5XHe1DNt/8kuQJjdboV1DCKxVYYF0L3CJmnIdYPJulmzYDZ8M9qV7ZMMz1z4YCv7BydVaao7KL",
	"wOMFypOEkn1D7QG7k7Ou3a/bA7p+7GwYmX12pnInz36BUvzW8bWnSXerQGHor16X+2Vps2055ndKtvFm",
	"STUxHWp1mdZ7tWYyFbVHTUw+Hny3B3AdKWaXEN0LZfIA9B0WUrcYCpIdIeDmM61wktBY21GnZ4977GvL",
	"4ifbGLmnUkenQHNcouxkj/jilBjt1v9Un5fEI8RxzX1dreEnmzySDO/S9HBSidjJNLFX1dH/1V/XISdJ",
	"YvrI+YJ1/QB2BvjXNwoy0llleAd+j7dDz9vJ8GgK17tx/8Z4sDuyftaIwEPkPQ2D5eOjwkHujz8uDLL9",
	"OkcG9tgz8EmV9it25PSwK+Dp1rgT/dQej08Ru+Y65q0xXeWLFOYsT/8fBouRgn1qwHhy0j80aIwTJu0l",
	"v+zpbnwNJSyYXZnnta2wXtjA5fPieZGjU/lyAu1N+3cAAAD//2wxXrYmEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
