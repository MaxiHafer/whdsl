// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: whdsl/transaction/v1/transaction.proto

package transactionv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/maxihafer/whdsl/pkg/pb/whdsl/transaction/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TransactionServiceName is the fully-qualified name of the TransactionService service.
	TransactionServiceName = "whdsl.transaction.v1.TransactionService"
)

// TransactionServiceClient is a client for the whdsl.transaction.v1.TransactionService service.
type TransactionServiceClient interface {
	ShowDetails(context.Context, *connect_go.Request[v1.ShowDetailsRequest]) (*connect_go.Response[v1.ShowDetailsResponse], error)
	ShowAll(context.Context, *connect_go.Request[v1.ShowAllRequest]) (*connect_go.Response[v1.ShowAllResponse], error)
	NewTransaction(context.Context, *connect_go.Request[v1.NewTransactionRequest]) (*connect_go.Response[v1.NewTransactionResponse], error)
	UpdateDetails(context.Context, *connect_go.Request[v1.UpdateDetailsRequest]) (*connect_go.Response[v1.UpdateDetailsResponse], error)
	DeleteTransaction(context.Context, *connect_go.Request[v1.DeleteTransactionRequest]) (*connect_go.Response[v1.DeleteTransactionResponse], error)
}

// NewTransactionServiceClient constructs a client for the whdsl.transaction.v1.TransactionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransactionServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TransactionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &transactionServiceClient{
		showDetails: connect_go.NewClient[v1.ShowDetailsRequest, v1.ShowDetailsResponse](
			httpClient,
			baseURL+"/whdsl.transaction.v1.TransactionService/ShowDetails",
			opts...,
		),
		showAll: connect_go.NewClient[v1.ShowAllRequest, v1.ShowAllResponse](
			httpClient,
			baseURL+"/whdsl.transaction.v1.TransactionService/ShowAll",
			opts...,
		),
		newTransaction: connect_go.NewClient[v1.NewTransactionRequest, v1.NewTransactionResponse](
			httpClient,
			baseURL+"/whdsl.transaction.v1.TransactionService/NewTransaction",
			opts...,
		),
		updateDetails: connect_go.NewClient[v1.UpdateDetailsRequest, v1.UpdateDetailsResponse](
			httpClient,
			baseURL+"/whdsl.transaction.v1.TransactionService/UpdateDetails",
			opts...,
		),
		deleteTransaction: connect_go.NewClient[v1.DeleteTransactionRequest, v1.DeleteTransactionResponse](
			httpClient,
			baseURL+"/whdsl.transaction.v1.TransactionService/DeleteTransaction",
			opts...,
		),
	}
}

// transactionServiceClient implements TransactionServiceClient.
type transactionServiceClient struct {
	showDetails       *connect_go.Client[v1.ShowDetailsRequest, v1.ShowDetailsResponse]
	showAll           *connect_go.Client[v1.ShowAllRequest, v1.ShowAllResponse]
	newTransaction    *connect_go.Client[v1.NewTransactionRequest, v1.NewTransactionResponse]
	updateDetails     *connect_go.Client[v1.UpdateDetailsRequest, v1.UpdateDetailsResponse]
	deleteTransaction *connect_go.Client[v1.DeleteTransactionRequest, v1.DeleteTransactionResponse]
}

// ShowDetails calls whdsl.transaction.v1.TransactionService.ShowDetails.
func (c *transactionServiceClient) ShowDetails(ctx context.Context, req *connect_go.Request[v1.ShowDetailsRequest]) (*connect_go.Response[v1.ShowDetailsResponse], error) {
	return c.showDetails.CallUnary(ctx, req)
}

// ShowAll calls whdsl.transaction.v1.TransactionService.ShowAll.
func (c *transactionServiceClient) ShowAll(ctx context.Context, req *connect_go.Request[v1.ShowAllRequest]) (*connect_go.Response[v1.ShowAllResponse], error) {
	return c.showAll.CallUnary(ctx, req)
}

// NewTransaction calls whdsl.transaction.v1.TransactionService.NewTransaction.
func (c *transactionServiceClient) NewTransaction(ctx context.Context, req *connect_go.Request[v1.NewTransactionRequest]) (*connect_go.Response[v1.NewTransactionResponse], error) {
	return c.newTransaction.CallUnary(ctx, req)
}

// UpdateDetails calls whdsl.transaction.v1.TransactionService.UpdateDetails.
func (c *transactionServiceClient) UpdateDetails(ctx context.Context, req *connect_go.Request[v1.UpdateDetailsRequest]) (*connect_go.Response[v1.UpdateDetailsResponse], error) {
	return c.updateDetails.CallUnary(ctx, req)
}

// DeleteTransaction calls whdsl.transaction.v1.TransactionService.DeleteTransaction.
func (c *transactionServiceClient) DeleteTransaction(ctx context.Context, req *connect_go.Request[v1.DeleteTransactionRequest]) (*connect_go.Response[v1.DeleteTransactionResponse], error) {
	return c.deleteTransaction.CallUnary(ctx, req)
}

// TransactionServiceHandler is an implementation of the whdsl.transaction.v1.TransactionService
// service.
type TransactionServiceHandler interface {
	ShowDetails(context.Context, *connect_go.Request[v1.ShowDetailsRequest]) (*connect_go.Response[v1.ShowDetailsResponse], error)
	ShowAll(context.Context, *connect_go.Request[v1.ShowAllRequest]) (*connect_go.Response[v1.ShowAllResponse], error)
	NewTransaction(context.Context, *connect_go.Request[v1.NewTransactionRequest]) (*connect_go.Response[v1.NewTransactionResponse], error)
	UpdateDetails(context.Context, *connect_go.Request[v1.UpdateDetailsRequest]) (*connect_go.Response[v1.UpdateDetailsResponse], error)
	DeleteTransaction(context.Context, *connect_go.Request[v1.DeleteTransactionRequest]) (*connect_go.Response[v1.DeleteTransactionResponse], error)
}

// NewTransactionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransactionServiceHandler(svc TransactionServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/whdsl.transaction.v1.TransactionService/ShowDetails", connect_go.NewUnaryHandler(
		"/whdsl.transaction.v1.TransactionService/ShowDetails",
		svc.ShowDetails,
		opts...,
	))
	mux.Handle("/whdsl.transaction.v1.TransactionService/ShowAll", connect_go.NewUnaryHandler(
		"/whdsl.transaction.v1.TransactionService/ShowAll",
		svc.ShowAll,
		opts...,
	))
	mux.Handle("/whdsl.transaction.v1.TransactionService/NewTransaction", connect_go.NewUnaryHandler(
		"/whdsl.transaction.v1.TransactionService/NewTransaction",
		svc.NewTransaction,
		opts...,
	))
	mux.Handle("/whdsl.transaction.v1.TransactionService/UpdateDetails", connect_go.NewUnaryHandler(
		"/whdsl.transaction.v1.TransactionService/UpdateDetails",
		svc.UpdateDetails,
		opts...,
	))
	mux.Handle("/whdsl.transaction.v1.TransactionService/DeleteTransaction", connect_go.NewUnaryHandler(
		"/whdsl.transaction.v1.TransactionService/DeleteTransaction",
		svc.DeleteTransaction,
		opts...,
	))
	return "/whdsl.transaction.v1.TransactionService/", mux
}

// UnimplementedTransactionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTransactionServiceHandler struct{}

func (UnimplementedTransactionServiceHandler) ShowDetails(context.Context, *connect_go.Request[v1.ShowDetailsRequest]) (*connect_go.Response[v1.ShowDetailsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.transaction.v1.TransactionService.ShowDetails is not implemented"))
}

func (UnimplementedTransactionServiceHandler) ShowAll(context.Context, *connect_go.Request[v1.ShowAllRequest]) (*connect_go.Response[v1.ShowAllResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.transaction.v1.TransactionService.ShowAll is not implemented"))
}

func (UnimplementedTransactionServiceHandler) NewTransaction(context.Context, *connect_go.Request[v1.NewTransactionRequest]) (*connect_go.Response[v1.NewTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.transaction.v1.TransactionService.NewTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) UpdateDetails(context.Context, *connect_go.Request[v1.UpdateDetailsRequest]) (*connect_go.Response[v1.UpdateDetailsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.transaction.v1.TransactionService.UpdateDetails is not implemented"))
}

func (UnimplementedTransactionServiceHandler) DeleteTransaction(context.Context, *connect_go.Request[v1.DeleteTransactionRequest]) (*connect_go.Response[v1.DeleteTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.transaction.v1.TransactionService.DeleteTransaction is not implemented"))
}
