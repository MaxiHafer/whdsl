// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: whdsl/article/v1/transaction.proto

package articlev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/maxihafer/whdsl/pkg/pb/whdsl/article/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TransactionServiceName is the fully-qualified name of the TransactionService service.
	TransactionServiceName = "whdsl.article.v1.TransactionService"
)

// TransactionServiceClient is a client for the whdsl.article.v1.TransactionService service.
type TransactionServiceClient interface {
	GetTransaction(context.Context, *connect_go.Request[v1.GetTransactionRequest]) (*connect_go.Response[v1.GetTransactionResponse], error)
	ListTransactions(context.Context, *connect_go.Request[v1.ListTransactionsRequest]) (*connect_go.Response[v1.ListTransactionsResponse], error)
	CreateTransaction(context.Context, *connect_go.Request[v1.CreateTransactionRequest]) (*connect_go.Response[v1.CreateTransactionResponse], error)
	UpdateTransaction(context.Context, *connect_go.Request[v1.UpdateTransactionRequest]) (*connect_go.Response[v1.UpdateTransactionResponse], error)
	DeleteTransaction(context.Context, *connect_go.Request[v1.DeleteTransactionRequest]) (*connect_go.Response[v1.DeleteTransactionResponse], error)
}

// NewTransactionServiceClient constructs a client for the whdsl.article.v1.TransactionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransactionServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TransactionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &transactionServiceClient{
		getTransaction: connect_go.NewClient[v1.GetTransactionRequest, v1.GetTransactionResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.TransactionService/GetTransaction",
			opts...,
		),
		listTransactions: connect_go.NewClient[v1.ListTransactionsRequest, v1.ListTransactionsResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.TransactionService/ListTransactions",
			opts...,
		),
		createTransaction: connect_go.NewClient[v1.CreateTransactionRequest, v1.CreateTransactionResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.TransactionService/CreateTransaction",
			opts...,
		),
		updateTransaction: connect_go.NewClient[v1.UpdateTransactionRequest, v1.UpdateTransactionResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.TransactionService/UpdateTransaction",
			opts...,
		),
		deleteTransaction: connect_go.NewClient[v1.DeleteTransactionRequest, v1.DeleteTransactionResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.TransactionService/DeleteTransaction",
			opts...,
		),
	}
}

// transactionServiceClient implements TransactionServiceClient.
type transactionServiceClient struct {
	getTransaction    *connect_go.Client[v1.GetTransactionRequest, v1.GetTransactionResponse]
	listTransactions  *connect_go.Client[v1.ListTransactionsRequest, v1.ListTransactionsResponse]
	createTransaction *connect_go.Client[v1.CreateTransactionRequest, v1.CreateTransactionResponse]
	updateTransaction *connect_go.Client[v1.UpdateTransactionRequest, v1.UpdateTransactionResponse]
	deleteTransaction *connect_go.Client[v1.DeleteTransactionRequest, v1.DeleteTransactionResponse]
}

// GetTransaction calls whdsl.article.v1.TransactionService.GetTransaction.
func (c *transactionServiceClient) GetTransaction(ctx context.Context, req *connect_go.Request[v1.GetTransactionRequest]) (*connect_go.Response[v1.GetTransactionResponse], error) {
	return c.getTransaction.CallUnary(ctx, req)
}

// ListTransactions calls whdsl.article.v1.TransactionService.ListTransactions.
func (c *transactionServiceClient) ListTransactions(ctx context.Context, req *connect_go.Request[v1.ListTransactionsRequest]) (*connect_go.Response[v1.ListTransactionsResponse], error) {
	return c.listTransactions.CallUnary(ctx, req)
}

// CreateTransaction calls whdsl.article.v1.TransactionService.CreateTransaction.
func (c *transactionServiceClient) CreateTransaction(ctx context.Context, req *connect_go.Request[v1.CreateTransactionRequest]) (*connect_go.Response[v1.CreateTransactionResponse], error) {
	return c.createTransaction.CallUnary(ctx, req)
}

// UpdateTransaction calls whdsl.article.v1.TransactionService.UpdateTransaction.
func (c *transactionServiceClient) UpdateTransaction(ctx context.Context, req *connect_go.Request[v1.UpdateTransactionRequest]) (*connect_go.Response[v1.UpdateTransactionResponse], error) {
	return c.updateTransaction.CallUnary(ctx, req)
}

// DeleteTransaction calls whdsl.article.v1.TransactionService.DeleteTransaction.
func (c *transactionServiceClient) DeleteTransaction(ctx context.Context, req *connect_go.Request[v1.DeleteTransactionRequest]) (*connect_go.Response[v1.DeleteTransactionResponse], error) {
	return c.deleteTransaction.CallUnary(ctx, req)
}

// TransactionServiceHandler is an implementation of the whdsl.article.v1.TransactionService
// service.
type TransactionServiceHandler interface {
	GetTransaction(context.Context, *connect_go.Request[v1.GetTransactionRequest]) (*connect_go.Response[v1.GetTransactionResponse], error)
	ListTransactions(context.Context, *connect_go.Request[v1.ListTransactionsRequest]) (*connect_go.Response[v1.ListTransactionsResponse], error)
	CreateTransaction(context.Context, *connect_go.Request[v1.CreateTransactionRequest]) (*connect_go.Response[v1.CreateTransactionResponse], error)
	UpdateTransaction(context.Context, *connect_go.Request[v1.UpdateTransactionRequest]) (*connect_go.Response[v1.UpdateTransactionResponse], error)
	DeleteTransaction(context.Context, *connect_go.Request[v1.DeleteTransactionRequest]) (*connect_go.Response[v1.DeleteTransactionResponse], error)
}

// NewTransactionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransactionServiceHandler(svc TransactionServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/whdsl.article.v1.TransactionService/GetTransaction", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.TransactionService/GetTransaction",
		svc.GetTransaction,
		opts...,
	))
	mux.Handle("/whdsl.article.v1.TransactionService/ListTransactions", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.TransactionService/ListTransactions",
		svc.ListTransactions,
		opts...,
	))
	mux.Handle("/whdsl.article.v1.TransactionService/CreateTransaction", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.TransactionService/CreateTransaction",
		svc.CreateTransaction,
		opts...,
	))
	mux.Handle("/whdsl.article.v1.TransactionService/UpdateTransaction", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.TransactionService/UpdateTransaction",
		svc.UpdateTransaction,
		opts...,
	))
	mux.Handle("/whdsl.article.v1.TransactionService/DeleteTransaction", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.TransactionService/DeleteTransaction",
		svc.DeleteTransaction,
		opts...,
	))
	return "/whdsl.article.v1.TransactionService/", mux
}

// UnimplementedTransactionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTransactionServiceHandler struct{}

func (UnimplementedTransactionServiceHandler) GetTransaction(context.Context, *connect_go.Request[v1.GetTransactionRequest]) (*connect_go.Response[v1.GetTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.TransactionService.GetTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) ListTransactions(context.Context, *connect_go.Request[v1.ListTransactionsRequest]) (*connect_go.Response[v1.ListTransactionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.TransactionService.ListTransactions is not implemented"))
}

func (UnimplementedTransactionServiceHandler) CreateTransaction(context.Context, *connect_go.Request[v1.CreateTransactionRequest]) (*connect_go.Response[v1.CreateTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.TransactionService.CreateTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) UpdateTransaction(context.Context, *connect_go.Request[v1.UpdateTransactionRequest]) (*connect_go.Response[v1.UpdateTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.TransactionService.UpdateTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) DeleteTransaction(context.Context, *connect_go.Request[v1.DeleteTransactionRequest]) (*connect_go.Response[v1.DeleteTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.TransactionService.DeleteTransaction is not implemented"))
}
