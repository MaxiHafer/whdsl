// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: whdsl/article/v1/article.proto

package articlev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/maxihafer/whdsl/pkg/pb/whdsl/article/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ArticleServiceName is the fully-qualified name of the ArticleService service.
	ArticleServiceName = "whdsl.article.v1.ArticleService"
)

// ArticleServiceClient is a client for the whdsl.article.v1.ArticleService service.
type ArticleServiceClient interface {
	GetArticle(context.Context, *connect_go.Request[v1.GetArticleRequest]) (*connect_go.Response[v1.GetArticleResponse], error)
	ListArticles(context.Context, *connect_go.Request[v1.ListArticlesRequest]) (*connect_go.Response[v1.ListArticlesResponse], error)
	CreateArticle(context.Context, *connect_go.Request[v1.CreateArticleRequest]) (*connect_go.Response[v1.CreateArticleResponse], error)
	UpdateArticle(context.Context, *connect_go.Request[v1.UpdateArticleRequest]) (*connect_go.Response[v1.UpdateArticleResponse], error)
	DeleteArticle(context.Context, *connect_go.Request[v1.DeleteArticleRequest]) (*connect_go.Response[v1.DeleteArticleResponse], error)
}

// NewArticleServiceClient constructs a client for the whdsl.article.v1.ArticleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArticleServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ArticleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &articleServiceClient{
		getArticle: connect_go.NewClient[v1.GetArticleRequest, v1.GetArticleResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.ArticleService/GetArticle",
			opts...,
		),
		listArticles: connect_go.NewClient[v1.ListArticlesRequest, v1.ListArticlesResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.ArticleService/ListArticles",
			opts...,
		),
		createArticle: connect_go.NewClient[v1.CreateArticleRequest, v1.CreateArticleResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.ArticleService/CreateArticle",
			opts...,
		),
		updateArticle: connect_go.NewClient[v1.UpdateArticleRequest, v1.UpdateArticleResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.ArticleService/UpdateArticle",
			opts...,
		),
		deleteArticle: connect_go.NewClient[v1.DeleteArticleRequest, v1.DeleteArticleResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.ArticleService/DeleteArticle",
			opts...,
		),
	}
}

// articleServiceClient implements ArticleServiceClient.
type articleServiceClient struct {
	getArticle    *connect_go.Client[v1.GetArticleRequest, v1.GetArticleResponse]
	listArticles  *connect_go.Client[v1.ListArticlesRequest, v1.ListArticlesResponse]
	createArticle *connect_go.Client[v1.CreateArticleRequest, v1.CreateArticleResponse]
	updateArticle *connect_go.Client[v1.UpdateArticleRequest, v1.UpdateArticleResponse]
	deleteArticle *connect_go.Client[v1.DeleteArticleRequest, v1.DeleteArticleResponse]
}

// GetArticle calls whdsl.article.v1.ArticleService.GetArticle.
func (c *articleServiceClient) GetArticle(ctx context.Context, req *connect_go.Request[v1.GetArticleRequest]) (*connect_go.Response[v1.GetArticleResponse], error) {
	return c.getArticle.CallUnary(ctx, req)
}

// ListArticles calls whdsl.article.v1.ArticleService.ListArticles.
func (c *articleServiceClient) ListArticles(ctx context.Context, req *connect_go.Request[v1.ListArticlesRequest]) (*connect_go.Response[v1.ListArticlesResponse], error) {
	return c.listArticles.CallUnary(ctx, req)
}

// CreateArticle calls whdsl.article.v1.ArticleService.CreateArticle.
func (c *articleServiceClient) CreateArticle(ctx context.Context, req *connect_go.Request[v1.CreateArticleRequest]) (*connect_go.Response[v1.CreateArticleResponse], error) {
	return c.createArticle.CallUnary(ctx, req)
}

// UpdateArticle calls whdsl.article.v1.ArticleService.UpdateArticle.
func (c *articleServiceClient) UpdateArticle(ctx context.Context, req *connect_go.Request[v1.UpdateArticleRequest]) (*connect_go.Response[v1.UpdateArticleResponse], error) {
	return c.updateArticle.CallUnary(ctx, req)
}

// DeleteArticle calls whdsl.article.v1.ArticleService.DeleteArticle.
func (c *articleServiceClient) DeleteArticle(ctx context.Context, req *connect_go.Request[v1.DeleteArticleRequest]) (*connect_go.Response[v1.DeleteArticleResponse], error) {
	return c.deleteArticle.CallUnary(ctx, req)
}

// ArticleServiceHandler is an implementation of the whdsl.article.v1.ArticleService service.
type ArticleServiceHandler interface {
	GetArticle(context.Context, *connect_go.Request[v1.GetArticleRequest]) (*connect_go.Response[v1.GetArticleResponse], error)
	ListArticles(context.Context, *connect_go.Request[v1.ListArticlesRequest]) (*connect_go.Response[v1.ListArticlesResponse], error)
	CreateArticle(context.Context, *connect_go.Request[v1.CreateArticleRequest]) (*connect_go.Response[v1.CreateArticleResponse], error)
	UpdateArticle(context.Context, *connect_go.Request[v1.UpdateArticleRequest]) (*connect_go.Response[v1.UpdateArticleResponse], error)
	DeleteArticle(context.Context, *connect_go.Request[v1.DeleteArticleRequest]) (*connect_go.Response[v1.DeleteArticleResponse], error)
}

// NewArticleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArticleServiceHandler(svc ArticleServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/whdsl.article.v1.ArticleService/GetArticle", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.ArticleService/GetArticle",
		svc.GetArticle,
		opts...,
	))
	mux.Handle("/whdsl.article.v1.ArticleService/ListArticles", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.ArticleService/ListArticles",
		svc.ListArticles,
		opts...,
	))
	mux.Handle("/whdsl.article.v1.ArticleService/CreateArticle", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.ArticleService/CreateArticle",
		svc.CreateArticle,
		opts...,
	))
	mux.Handle("/whdsl.article.v1.ArticleService/UpdateArticle", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.ArticleService/UpdateArticle",
		svc.UpdateArticle,
		opts...,
	))
	mux.Handle("/whdsl.article.v1.ArticleService/DeleteArticle", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.ArticleService/DeleteArticle",
		svc.DeleteArticle,
		opts...,
	))
	return "/whdsl.article.v1.ArticleService/", mux
}

// UnimplementedArticleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArticleServiceHandler struct{}

func (UnimplementedArticleServiceHandler) GetArticle(context.Context, *connect_go.Request[v1.GetArticleRequest]) (*connect_go.Response[v1.GetArticleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.ArticleService.GetArticle is not implemented"))
}

func (UnimplementedArticleServiceHandler) ListArticles(context.Context, *connect_go.Request[v1.ListArticlesRequest]) (*connect_go.Response[v1.ListArticlesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.ArticleService.ListArticles is not implemented"))
}

func (UnimplementedArticleServiceHandler) CreateArticle(context.Context, *connect_go.Request[v1.CreateArticleRequest]) (*connect_go.Response[v1.CreateArticleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.ArticleService.CreateArticle is not implemented"))
}

func (UnimplementedArticleServiceHandler) UpdateArticle(context.Context, *connect_go.Request[v1.UpdateArticleRequest]) (*connect_go.Response[v1.UpdateArticleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.ArticleService.UpdateArticle is not implemented"))
}

func (UnimplementedArticleServiceHandler) DeleteArticle(context.Context, *connect_go.Request[v1.DeleteArticleRequest]) (*connect_go.Response[v1.DeleteArticleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.ArticleService.DeleteArticle is not implemented"))
}
