// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: whdsl/article/v1/article.proto

package articlev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/maxihafer/whdsl/pkg/pb/whdsl/article/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ArticleServiceName is the fully-qualified name of the ArticleService service.
	ArticleServiceName = "whdsl.article.v1.ArticleService"
)

// ArticleServiceClient is a client for the whdsl.article.v1.ArticleService service.
type ArticleServiceClient interface {
	ShowDetails(context.Context, *connect_go.Request[v1.ShowDetailsRequest]) (*connect_go.Response[v1.ShowDetailsResponse], error)
	ShowAll(context.Context, *connect_go.Request[v1.ShowAllRequest]) (*connect_go.Response[v1.ShowAllResponse], error)
	NewArticle(context.Context, *connect_go.Request[v1.NewArticleRequest]) (*connect_go.Response[v1.NewArticleResponse], error)
	UpdateDetails(context.Context, *connect_go.Request[v1.UpdateDetailsRequest]) (*connect_go.Response[v1.UpdateDetailsResponse], error)
	RemoveArticle(context.Context, *connect_go.Request[v1.RemoveArticleRequest]) (*connect_go.Response[v1.RemoveArticleResponse], error)
	ShowTransactions(context.Context, *connect_go.Request[v1.ShowTransactionsRequest]) (*connect_go.Response[v1.ShowTransactionsResponse], error)
	CalculateAmount(context.Context, *connect_go.Request[v1.CalculateAmountRequest]) (*connect_go.Response[v1.CalculateAmountResponse], error)
}

// NewArticleServiceClient constructs a client for the whdsl.article.v1.ArticleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArticleServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ArticleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &articleServiceClient{
		showDetails: connect_go.NewClient[v1.ShowDetailsRequest, v1.ShowDetailsResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.ArticleService/ShowDetails",
			opts...,
		),
		showAll: connect_go.NewClient[v1.ShowAllRequest, v1.ShowAllResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.ArticleService/ShowAll",
			opts...,
		),
		newArticle: connect_go.NewClient[v1.NewArticleRequest, v1.NewArticleResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.ArticleService/NewArticle",
			opts...,
		),
		updateDetails: connect_go.NewClient[v1.UpdateDetailsRequest, v1.UpdateDetailsResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.ArticleService/UpdateDetails",
			opts...,
		),
		removeArticle: connect_go.NewClient[v1.RemoveArticleRequest, v1.RemoveArticleResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.ArticleService/RemoveArticle",
			opts...,
		),
		showTransactions: connect_go.NewClient[v1.ShowTransactionsRequest, v1.ShowTransactionsResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.ArticleService/ShowTransactions",
			opts...,
		),
		calculateAmount: connect_go.NewClient[v1.CalculateAmountRequest, v1.CalculateAmountResponse](
			httpClient,
			baseURL+"/whdsl.article.v1.ArticleService/CalculateAmount",
			opts...,
		),
	}
}

// articleServiceClient implements ArticleServiceClient.
type articleServiceClient struct {
	showDetails      *connect_go.Client[v1.ShowDetailsRequest, v1.ShowDetailsResponse]
	showAll          *connect_go.Client[v1.ShowAllRequest, v1.ShowAllResponse]
	newArticle       *connect_go.Client[v1.NewArticleRequest, v1.NewArticleResponse]
	updateDetails    *connect_go.Client[v1.UpdateDetailsRequest, v1.UpdateDetailsResponse]
	removeArticle    *connect_go.Client[v1.RemoveArticleRequest, v1.RemoveArticleResponse]
	showTransactions *connect_go.Client[v1.ShowTransactionsRequest, v1.ShowTransactionsResponse]
	calculateAmount  *connect_go.Client[v1.CalculateAmountRequest, v1.CalculateAmountResponse]
}

// ShowDetails calls whdsl.article.v1.ArticleService.ShowDetails.
func (c *articleServiceClient) ShowDetails(ctx context.Context, req *connect_go.Request[v1.ShowDetailsRequest]) (*connect_go.Response[v1.ShowDetailsResponse], error) {
	return c.showDetails.CallUnary(ctx, req)
}

// ShowAll calls whdsl.article.v1.ArticleService.ShowAll.
func (c *articleServiceClient) ShowAll(ctx context.Context, req *connect_go.Request[v1.ShowAllRequest]) (*connect_go.Response[v1.ShowAllResponse], error) {
	return c.showAll.CallUnary(ctx, req)
}

// NewArticle calls whdsl.article.v1.ArticleService.NewArticle.
func (c *articleServiceClient) NewArticle(ctx context.Context, req *connect_go.Request[v1.NewArticleRequest]) (*connect_go.Response[v1.NewArticleResponse], error) {
	return c.newArticle.CallUnary(ctx, req)
}

// UpdateDetails calls whdsl.article.v1.ArticleService.UpdateDetails.
func (c *articleServiceClient) UpdateDetails(ctx context.Context, req *connect_go.Request[v1.UpdateDetailsRequest]) (*connect_go.Response[v1.UpdateDetailsResponse], error) {
	return c.updateDetails.CallUnary(ctx, req)
}

// RemoveArticle calls whdsl.article.v1.ArticleService.RemoveArticle.
func (c *articleServiceClient) RemoveArticle(ctx context.Context, req *connect_go.Request[v1.RemoveArticleRequest]) (*connect_go.Response[v1.RemoveArticleResponse], error) {
	return c.removeArticle.CallUnary(ctx, req)
}

// ShowTransactions calls whdsl.article.v1.ArticleService.ShowTransactions.
func (c *articleServiceClient) ShowTransactions(ctx context.Context, req *connect_go.Request[v1.ShowTransactionsRequest]) (*connect_go.Response[v1.ShowTransactionsResponse], error) {
	return c.showTransactions.CallUnary(ctx, req)
}

// CalculateAmount calls whdsl.article.v1.ArticleService.CalculateAmount.
func (c *articleServiceClient) CalculateAmount(ctx context.Context, req *connect_go.Request[v1.CalculateAmountRequest]) (*connect_go.Response[v1.CalculateAmountResponse], error) {
	return c.calculateAmount.CallUnary(ctx, req)
}

// ArticleServiceHandler is an implementation of the whdsl.article.v1.ArticleService service.
type ArticleServiceHandler interface {
	ShowDetails(context.Context, *connect_go.Request[v1.ShowDetailsRequest]) (*connect_go.Response[v1.ShowDetailsResponse], error)
	ShowAll(context.Context, *connect_go.Request[v1.ShowAllRequest]) (*connect_go.Response[v1.ShowAllResponse], error)
	NewArticle(context.Context, *connect_go.Request[v1.NewArticleRequest]) (*connect_go.Response[v1.NewArticleResponse], error)
	UpdateDetails(context.Context, *connect_go.Request[v1.UpdateDetailsRequest]) (*connect_go.Response[v1.UpdateDetailsResponse], error)
	RemoveArticle(context.Context, *connect_go.Request[v1.RemoveArticleRequest]) (*connect_go.Response[v1.RemoveArticleResponse], error)
	ShowTransactions(context.Context, *connect_go.Request[v1.ShowTransactionsRequest]) (*connect_go.Response[v1.ShowTransactionsResponse], error)
	CalculateAmount(context.Context, *connect_go.Request[v1.CalculateAmountRequest]) (*connect_go.Response[v1.CalculateAmountResponse], error)
}

// NewArticleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArticleServiceHandler(svc ArticleServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/whdsl.article.v1.ArticleService/ShowDetails", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.ArticleService/ShowDetails",
		svc.ShowDetails,
		opts...,
	))
	mux.Handle("/whdsl.article.v1.ArticleService/ShowAll", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.ArticleService/ShowAll",
		svc.ShowAll,
		opts...,
	))
	mux.Handle("/whdsl.article.v1.ArticleService/NewArticle", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.ArticleService/NewArticle",
		svc.NewArticle,
		opts...,
	))
	mux.Handle("/whdsl.article.v1.ArticleService/UpdateDetails", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.ArticleService/UpdateDetails",
		svc.UpdateDetails,
		opts...,
	))
	mux.Handle("/whdsl.article.v1.ArticleService/RemoveArticle", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.ArticleService/RemoveArticle",
		svc.RemoveArticle,
		opts...,
	))
	mux.Handle("/whdsl.article.v1.ArticleService/ShowTransactions", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.ArticleService/ShowTransactions",
		svc.ShowTransactions,
		opts...,
	))
	mux.Handle("/whdsl.article.v1.ArticleService/CalculateAmount", connect_go.NewUnaryHandler(
		"/whdsl.article.v1.ArticleService/CalculateAmount",
		svc.CalculateAmount,
		opts...,
	))
	return "/whdsl.article.v1.ArticleService/", mux
}

// UnimplementedArticleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArticleServiceHandler struct{}

func (UnimplementedArticleServiceHandler) ShowDetails(context.Context, *connect_go.Request[v1.ShowDetailsRequest]) (*connect_go.Response[v1.ShowDetailsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.ArticleService.ShowDetails is not implemented"))
}

func (UnimplementedArticleServiceHandler) ShowAll(context.Context, *connect_go.Request[v1.ShowAllRequest]) (*connect_go.Response[v1.ShowAllResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.ArticleService.ShowAll is not implemented"))
}

func (UnimplementedArticleServiceHandler) NewArticle(context.Context, *connect_go.Request[v1.NewArticleRequest]) (*connect_go.Response[v1.NewArticleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.ArticleService.NewArticle is not implemented"))
}

func (UnimplementedArticleServiceHandler) UpdateDetails(context.Context, *connect_go.Request[v1.UpdateDetailsRequest]) (*connect_go.Response[v1.UpdateDetailsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.ArticleService.UpdateDetails is not implemented"))
}

func (UnimplementedArticleServiceHandler) RemoveArticle(context.Context, *connect_go.Request[v1.RemoveArticleRequest]) (*connect_go.Response[v1.RemoveArticleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.ArticleService.RemoveArticle is not implemented"))
}

func (UnimplementedArticleServiceHandler) ShowTransactions(context.Context, *connect_go.Request[v1.ShowTransactionsRequest]) (*connect_go.Response[v1.ShowTransactionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.ArticleService.ShowTransactions is not implemented"))
}

func (UnimplementedArticleServiceHandler) CalculateAmount(context.Context, *connect_go.Request[v1.CalculateAmountRequest]) (*connect_go.Response[v1.CalculateAmountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("whdsl.article.v1.ArticleService.CalculateAmount is not implemented"))
}
